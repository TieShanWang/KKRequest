//
//  Request.m
//  PZJY
//
//  Created by ebeijia on 16/2/29.
//  Copyright © 2016年 EBJ. All righUI reserved.
//

#import "Request.h"
#import "SerBackDataModel.h"
#import <CommonCrypto/CommonDigest.h>
#import "KKRequestManager.h"
#import "AppDelegate.h"
@interface Request()
@end


/*********** 生成完整的网络请求地址 ***********/
NSString * fullHttpURLWithPath(NSString *path){
    return [NSString stringWithFormat:@"%@%@",
            [[NetInterfaceConfigure shareNetConfigure] baseIPPath],
            path];
}

/************  修饰字符串 ***********/
NSString * modifyString(NSString * string){
    return (string)?string:@"";
}

/// 修饰其实位置，为空 置为 0
NSString * modifyLimitWithString(NSString*string){
    if (string && (![string isEmpty])) {
        return string;
    }
    return @"0";
}

/// 修饰偏移量，为空 置为20
NSString * modifyOffSetWithString(NSString*string){
    if (string && (![string isEmpty])) {
        return string;
    }
    return @"20";
}

/************ md5 加密 ***********/
NSString * md5(NSString *string) {
    const char *cStr = [string UTF8String];
    unsigned char result[32];
    //CC_MD5( cStr, strlen(cStr), result);
    CC_MD5( cStr, (CC_LONG)(strlen(cStr)), result);
    
    NSString *md5Str= [NSString stringWithFormat:
                       @"%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X",
                       result[0], result[1], result[2], result[3],
                       result[4], result[5], result[6], result[7],
                       result[8], result[9], result[10], result[11],
                       result[12], result[13], result[14], result[15]
                       ];
    return [md5Str  uppercaseString];
}

@implementation Request



//登陆
+ (void)loginForUserName:(NSString *)userName
                     pwd:(NSString *)pwd
              data:(void(^)(SerBackDataModel*dataModel))bdata
{
    NSDictionary *dic = @{@"userName":modifyString(userName),
                          @"pwd": modifyString(md5(pwd))
                          };
    NSString *str = [dic JSONString];
    NSDictionary *postDic = @{@"json": str};
    
    [self POSTWithURLStr:fullHttpURLWithPath(@"/Login") parameters:postDic dealtype:RequestDataResultDealTypeAnalysis data:^(id data) {
        bdata(data);
    } error:nil];

}

//注册
+ (void)registerUserName:(NSString *)userName
                     pwd:(NSString *)pwd
              data:(void(^)(SerBackDataModel*dataModel))bdata
{
    
    NSString *passWord = md5(pwd);//不加密
    
    NSDictionary *dic = @{@"userName": userName,
                          @"pwd": passWord
                          };
    NSString *str = [dic JSONString];
    NSDictionary *postDic = @{@"json": str};
    
    [self POSTWithURLStr:fullHttpURLWithPath(@"/Register") parameters:postDic dealtype:RequestDataResultDealTypeAnalysis data:^(id data) {
        bdata(data);
    } error:nil];
    
}

//消息中心
+ (void )getNewsList:(void(^)(SerBackDataModel*dataModel))bdata error:(void(^)(NSError * error))bError
{
    NSDictionary *dic = @{};
    NSString *str = [dic JSONString];
    NSDictionary *postDic = @{@"json": str};
    
    [self POSTWithURLStr:@"/NewsList" parameters:postDic dealtype:RequestDataResultDealTypeAnalysis data:^(id data) {
        bdata(data);
    } error:^(NSError *error) {
        bError(error);
    }];

}



/// 请求中间数据处理层
/// 错误自动处理层
+(void)POSTWithURLStr:(NSString*)urlStr
           parameters:(id)parameters
             dealtype:(RequestDataResultDealType)type
                 data:(void(^)(id data))bdata
                error:(void(^)(NSError * error))bError{
    [self POSTWithURLStr:urlStr parameters:parameters data:^(id data) {
        
        // 1.判断是否登录超时
        if ([self judgeIsLoginOutByData:data]) {
            // 当登录超时的时候，重新登录并重新发送数据
            [self autoLoginWhenLoginOutAndSendRequestWithURLStr:urlStr
                                                     parameters:parameters
                                                       dealtype:type
                                                           data:bdata
                                                          error:bError];
            
        }
        // 2. 其他的判断条件，如：异地登录，此处暂且设为NO
        else if(NO){
            
        }
        // 3. 如果没有异常情况则处理数据
        else{
            [self dealDataWithDealtype:type data:bdata responseData:data];
        }
        
    } error:^(NSError *error) {
        /**
         *  如果错误的回调存在，说明要在请求的地方进行处理
         *  如果错误的回调不存在，说明要在此处理
         */
        if (bError) {
            bError(error);
        }else{
            // 展示网络无连接
            [self showNetError:error];
        }
    }];
}

/// 网络请求层
+(void)POSTWithURLStr:(NSString*)urlStr
           parameters:(id)parameters
                 data:(void(^)(id data))bdata
                error:(void(^)(NSError * error))bError{
    [[KKRequestManager defaultManager]
     POSTWithURLStr:urlStr
     parameters:parameters
     completion:^(id responseData, NSError *error) {
         // 主要以错误信息为依据。
         // 存在错误则网络错误，不存在则回调数据。
         if (error) {
             bError(error);
         }else{
             bdata(responseData);
         }
    }];
}

// 当登陆超时之后，重新登录并且冲洗发送之前的请求
+(void)autoLoginWhenLoginOutAndSendRequestWithURLStr:(NSString*)urlStr
                                          parameters:(id)parameters
                                            dealtype:(RequestDataResultDealType)type
                                                data:(void(^)(id data))bdata
                                               error:(void(^)(NSError * error))bError{
    // 当重新登录成功之后
    if (YES) {
        // 重新发送之前的数据
        [self POSTWithURLStr:urlStr
                  parameters:parameters
                    dealtype:type
                        data:bdata
                       error:bError];
    }
}



/**
 *  处理数据
 *  根据 type 判断：
 *  如果为原始数据，则直接回调原始数据
 *  如果类型为解析数据，则解析之后回调解析之后的数据
 *
 *  @param type  处理数据的类型 RequestDataResultDealType
 *  @param bdata 数据的回调
 *  @param data  将要处理的数据
 */
+(void)dealDataWithDealtype:(RequestDataResultDealType)type
                       data:(void(^)(id data))bdata
               responseData:(NSData*)data{
    
    // 1. 如果类型为解析
    if (type == RequestDataResultDealTypeAnalysis) {
        // 处理数据
        SerBackDataModel * model = [SerBackDataModel mj_objectWithKeyValues:[data mj_keyValues]];
        bdata(model);
    }
    // 2. 类型为原始数据
    else if (type == RequestDataResultDealTypeBackOriData){
        if (bdata) {
            bdata(data);
        }
    }
}


/**
 *  判断是否登录超时
 *
 *  @param data 判断依据的数据
 *
 *  @return     YES  or  NO
 */
+(BOOL)judgeIsLoginOutByData:(NSData*)data{
    return NO;
}


/**
 *  当网络请求失败并且网络的错误需要自动处理的情况进入
 *
 *  @param error 网络错误信息
 */
+(void)showNetError:(NSError*)error{
    [((AppDelegate*)[UIApplication sharedApplication].delegate).window makeHintBlowNavigationBarWithTitle:NetWorkNoConnect durtion:1.0f];
}













/**
 *  加密密码
 *
 *  @param str 密码
 *
 *  @return 加密之后的md5密码
 */
+(NSString * )md5ForPassWordWithStr:(NSString*)str{
    NSString *md5PswStr = [NSString stringWithFormat:@"ebj2016%@",str];
    return  md5(md5PswStr);
}

/**
 *  获取当前的系统时间
 *
 *  @return 时间
 */
+(NSString*)currentTime{
    NSTimeInterval time = [[NSDate date] timeIntervalSince1970];
    NSString * str = [NSString stringWithFormat:@"%.3f",time];
    NSArray * arr = [str componentsSeparatedByString:@"."];
    NSString * result = [arr componentsJoinedByString:@""];
    return result;
}



#pragma mark - 生成完整报文
+(NSDictionary*)getAllMessageWithMessageBody:(NSString*)body loginToken:(BOOL)token{
    NSString * tokenStr;
    if (token) {
        tokenStr = [UserInfoManager shareManager].userInfoModel.token;
    }else{
        tokenStr = @"QYVD8W2JJW4KYDP2YMKWFX36";
    }
    if (!tokenStr) {
        //TODO: 处理token为空的情况
        DDlog(@"获取token 为空");
        return @{};
    }
    // 完整的报文
    return  @{@"sendTime":[self currentTime],
              @"version":[ProjectHelper getAppVersion],
              @"appType":@"13",
              @"authToken":tokenStr,
              @"data":body,
              @"signType":@"01",
              @"sign":md5([NSString stringWithFormat:@"sendTime=%@data=%@",[self currentTime],body]),
              @"devId":[[UIDevice currentDevice] identifierForVendor].UUIDString
              };
}




+(NSArray*)transDataToMessageCenterArray:(NSDictionary*)dic{
    if (([dic[@"success"] integerValue] == 1) && ([dic[@"errorInfo"] length] == 0)) {
        
        NSMutableArray * arr = [[NSMutableArray alloc]init];
        for (NSDictionary * dicTmp in dic[@"content"]) {
            MessageCenterModel * model = [[MessageCenterModel alloc]init];
            [model setValuesForKeysWithDictionary:dicTmp];
            [arr addObject:model];
        }
        return  arr;
    }
    return @[];
}
@end
